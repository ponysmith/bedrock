- config.json.sample
- dist:
  - styles:
    - bedrock.css
    - bedrock.min.css
    - bedrock-{{version}}.css
    - bedrock-{{version}}.min.css
  - components
    - .gitkeep
- gulpfile.js
- gulp:
  - init:
  - styles:
  - components:
  - version:
- styles:
  - vars:
    - core:
      - vars.scss
    - lib:
      - vars.scss.sample
    main.scss
  - fonts:
    - fonts.scss
    - glyphs.scss
  - mixins:
    - core:
      - mixins.scss
    - lib:
      - mixins.scss.sample
    main.scss
  - elements:
    - core:
      - elements.scss
        - headers.scss
        - lists.scss
        - tables.scss
        - glyphs.scss
        - grid.scss
        - button.scss
        - images.scss
    - lib:
      - elements.scss.sample
  - reset.scss
- components:
  - accordion:
    - component.html
    - styles.css
    - scripts.js
    - markup.html


GIT
.gitignore should ignore everything in */lib folders except the *.sample files

CONFIG
- Need a config.json file to set vars for gulp compilation
  - white/black list components and web components to include
  - set dest directory for compiled files

GULP
- gulp compiles main sass file (including all core BR css)
- gulp also individually compiles the sass files for all webcomponents
  - web component SCSS files need to import vars, mixins, etc for compilation
  - places their compiled versions in /components/{{component}}/styles.css
  - that css file is then injected in the final *.html webcomponent file
  - https://www.npmjs.com/package/gulp-file-include
    - might be able to use the "filters" option to compile the sass in line
- compiled files should be built to "external" directories (non within the BR module)

USAGE
- install as submodule or externally
- probably should encourage submodule to allow inclusion into build process of project
- create NPM tasks as aliases for gulp to allow hooking into the build process from external build process


assets:
  bedrock:
    config.yml.sample
    overrides.scss.sample (maybe instead of overrides sample, should just be copying the actual vars file? but what about the !default flag)
      - override vars
      - override fonts (in this case fonts should be loaded from google fonts, not embedded)
        - can still embed glyphs
    config.yml (locally modifiable)
      - allow bedrock to compile additional files (e.g. lib.scss, app.scss) and do versioning, etc
        - in config, define a compile css array
          [
            { files: ['bedrock.scss', '../lib/lib.scss'], dest: '../dist/css' version: false },
            { files: ['../app/app.scss'], dest: '../dist/css', version: true, }
          ]
          possibly do the same for components
        - then in gulp build process, compile multiple files in order listed and cat them (unless gulp-sass can cat them already)
    overrides.scss (locally modifiable)
    init.scss (includes vars, mixins, fonts, etc in correct order)
    src:
      css:
        bedrock.scss
      components:
  app:
    app.scss
      @import '../bedrock/init.scss'
  lib:

  dist:
